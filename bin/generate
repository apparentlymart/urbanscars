#!/usr/bin/env python

import sass
import os
import os.path
import jinja2
from datetime import datetime, date
import time
import docutils.core
import docutils.nodes
import cgi
from StringIO import StringIO
from dulwich.repo import Repo as GitRepo, Commit as GitCommit


def main():
    base_dir = os.path.join(os.path.dirname(__file__), "..")
    articles_dir = os.path.join(base_dir, "articles")
    media_dir = os.path.join(base_dir, "media")
    templates_dir = os.path.join(base_dir, "templates")

    git_repo = GitRepo(base_dir)

    media = copy_media(media_dir)
    media_tree = git_tree_for_dict(media, git_repo)
    media_key = "media:" + media_tree.id[:8]
    media_prefix = "/%s/" % media_key

    root = {}
    root[media_key] = media

    template_env = jinja2.Environment(
        loader=jinja2.FileSystemLoader(templates_dir),
    )

    articles = prepare_articles(articles_dir)
    for article in articles:
        article_dict = {}
        article_dict["index.html"] = render_article(
            article,
            template_env,
            media_prefix,
        )
        render_article_images(article, article_dict)
        root[article.urlname] = article_dict

    root["index.html"] = render_index(articles, template_env, media_prefix)
    root["CNAME"] = "urbanscars.com"

    root_tree = git_tree_for_dict(root, git_repo)
    commit = GitCommit()
    commit.tree = root_tree.id
    commit.message = "Generated from %s\n\n%s" % (
        git_repo["HEAD"].id,
        git_repo["HEAD"],
    )
    now = int(time.mktime(datetime.utcnow().timetuple()))
    commit.committer = "Site Generator <generator@urbanscars.com>"
    commit.commit_time = now
    commit.commit_timezone = 0
    commit.author = "Site Generator <generator@urbanscars.com>"
    commit.author_time = now
    commit.author_timezone = 0
    git_repo.object_store.add_object(commit)
    git_repo["refs/heads/gh-pages"] = commit.id
    print commit.id


def copy_media(media_dir):
    ret = {}
    items = os.listdir(media_dir)
    for fn in items:
        full_fn = os.path.join(media_dir, fn)
        if os.path.isdir(full_fn):
            ret[fn] = copy_media(full_fn)
        else:
            if fn[-5:] == ".scss":
                new_fn = fn[:-5] + ".css"
                ret[new_fn] = sass.compile(
                    filename=full_fn,
                )
            else:
                ret[fn] = open(full_fn, 'r').read()
    return ret


class Article(object):
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)


class ArticleImage(object):
    def __init__(self, source_fn, required_width):
        self.source_fn = source_fn
        self.required_width = required_width

    @property
    def target_fn(self):
        (basename, ext) = os.path.splitext(self.source_fn)
        return "%s_%i.jpg" % (basename, self.required_width)


def prepare_articles(articles_dir):
    articles = []
    items = os.listdir(articles_dir)

    class DocumentVisitor(docutils.nodes.NodeVisitor):

        def __init__(self, document, f):
            self.f = f
            self.heading_level = 1
            self.title = None
            self.author = None
            self.summary = None
            self.date = None
            self.city = None
            self.document = document
            self.main_image_fn = None
            self.images = {}
            self.in_floaty_figure = False
            docutils.nodes.NodeVisitor.__init__(self, document)

        def eat(self, elem):
            raise docutils.nodes.SkipNode

        def ignore(self, elem):
            pass

        visit_document = ignore
        depart_document = ignore

        def visit_title(self, title):
            if self.heading_level < 2:
                self.title = title.astext()
                raise docutils.nodes.SkipNode
            else:
                self.f.write("<h%i>" % self.heading_level)
        def depart_title(self, title):
            self.f.write("</h%i>" % self.heading_level)

        def visit_docinfo(self, docinfo):
            # FIXME: This should be more robust, not assume that
            # the author is always first
            dv = DocInfoVisitor(self.document)
            docinfo.walkabout(dv)
            self.author = dv.author
            self.date = dv.date
            self.city = dv.city
            self.keywords = dv.keywords
            if dv.main_image is not None:
                image = ArticleImage(
                    source_fn=dv.main_image,
                    required_width=600,
                )
                self.main_image_fn = image.target_fn
                self.images[image.target_fn] = image
            raise docutils.nodes.SkipNode

        def visit_topic(self, topic):
            # FIXME: This should be more robust, not assume that
            # the abstract is always the second element and that
            # it's a single paragraph.
            self.summary = topic[1].astext()
            raise docutils.nodes.SkipNode

        def visit_Text(self, text):
            self.f.write(cgi.escape(unicode(text)).encode('utf8'))
        depart_Text = ignore

        def visit_figure(self, figure):
            self.f.write("<figure")
            classes = figure["classes"]
            if len(classes) > 0:
                self.f.write(' class="%s"' % " ".join(classes))

            if "float" in classes:
                self.in_floaty_figure = True

            self.f.write(">")
        def depart_figure(self, figure):
            self.in_floaty_figure = False
            self.f.write("</figure>")

        def visit_paragraph(self, p):
            self.f.write("<p>")
        def depart_paragraph(self, p):
            self.f.write("</p>")

        def visit_section(self, s):
            self.f.write("<section")
            ids = s["ids"]
            if len(ids) > 0:
                self.f.write(' id="%s"' % " ".join(ids))
            self.f.write(">")
            self.heading_level = self.heading_level + 1
        def depart_section(self, s):
            self.f.write("</section>")
            self.heading_level = self.heading_level - 1

        def visit_image(self, image):
            source_fn = image["uri"]
            if self.in_floaty_figure:
                width = 290
            else:
                width = 600

            image = ArticleImage(
                source_fn=source_fn,
                required_width=width,
            )
            self.images[image.target_fn] = image
            self.f.write("<img src=\"%s\">" % image.target_fn)
        depart_image = ignore

        def visit_caption(self, caption):
            self.f.write("<figcaption>")
        def depart_caption(self, caption):
            self.f.write("</figcaption>")

        def visit_legend(self, legend):
            self.f.write('<div class="attrib">%s</div>' % (
                legend.astext().encode('utf8')
            ))
            raise docutils.nodes.SkipNode

    class DocInfoVisitor(docutils.nodes.NodeVisitor):
        def __init__(self, document):
            self.date = None
            self.author = None
            self.city = None
            self.keywords = None
            self.main_image = None
            docutils.nodes.NodeVisitor.__init__(self, document)

        def visit_docinfo(self, docinfo):
            pass
        def depart_docinfo(self, docinfo):
            pass

        def visit_author(self, author):
            self.author = author.astext()
            raise docutils.nodes.SkipNode

        def visit_date(self, date):
            self.date = datetime.strptime(date.astext(), "%Y-%m-%d").date()
            raise docutils.nodes.SkipNode

        def visit_field(self, field):
            name = field[0].astext()
            value = field[1].astext()

            if name == "City":
                self.city = value
            elif name == "Keywords":
                self.keywords = value
            elif name == "Main Image":
                self.main_image = value

            raise docutils.nodes.SkipNode


    for fn in items:
        full_fn = os.path.join(articles_dir, fn)
        if os.path.isdir(full_fn):
            content_fn = os.path.join(full_fn, "article.rst")
            content_src = open(content_fn, 'r').read()
            doctree = docutils.core.publish_doctree(content_src)
            title_idx = doctree.first_child_matching_class(
                docutils.nodes.title,
            )
            docinfo_idx = doctree.first_child_matching_class(
                docutils.nodes.docinfo,
            )
            topic_idx = doctree.first_child_matching_class(
                docutils.nodes.topic,
            )

            f = StringIO()
            v = DocumentVisitor(doctree, f)
            ex = None
            doctree.walkabout(v)

            articles.append(Article(
                urlname=fn,
                title=v.title,
                author=v.author,
                summary=v.summary,
                body=f.getvalue(),
                url="/%s/" % fn,
                city=v.city,
                date=v.date,
                keywords=v.keywords,
                images=v.images.values(),
                source_dir=full_fn,
                main_image_url="/%s/%s" % (fn, v.main_image_fn),
            ))

    return articles


def render_article(article, template_env, media_prefix):
    tmpl = template_env.get_template("article.html")
    return unicode(tmpl.render(
        article=article,
        media_prefix=media_prefix,
    )).encode('utf8')


def render_article_images(article, articles_dict):
    from PIL import Image
    for image in article.images:
        source_path = os.path.join(article.source_dir, image.source_fn)
        try:
            im = Image.open(source_path)
        except IOError, ex:
            print "Failed to load image %s for article at %s: %s" % (
                image.source_fn, article.url, ex,
            )
            continue

        im.thumbnail((image.required_width, 5000), Image.ANTIALIAS)
        f = StringIO()
        im.save(f, "JPEG")
        articles_dict[str(image.target_fn)] = f.getvalue()


def render_index(articles, template_env, media_prefix):
    tmpl = template_env.get_template("index.html")
    hero = articles[0]
    main_articles = articles[1:]
    scratches_articles = []
    return unicode(tmpl.render(
        hero=hero,
        main_articles=main_articles,
        scratches_articles=scratches_articles,
        media_prefix=media_prefix,
    )).encode('utf8')


def git_tree_for_dict(d, git_repo):
    from dulwich.objects import Tree, Blob
    tree = Tree()
    for fn, data in d.iteritems():
        if type(data) is dict:
            subtree = git_tree_for_dict(data, git_repo)
            tree.add(fn, 0040000, subtree.id)
        else:
            blob = Blob.from_string(data)
            git_repo.object_store.add_object(blob)
            tree.add(fn, 0100644, blob.id)
    git_repo.object_store.add_object(tree)
    return tree


main()
